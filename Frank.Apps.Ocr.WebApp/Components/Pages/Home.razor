@page "/"
@using System.Text
@using System.Text.Json
@using Frank.Apps.Ocr.WebApp.Components.UserComponents
@using Frank.Apps.Ocr.WebApp.Helpers
@using Frank.Apps.Ocr.WebApp.Models
@using BlazorMonaco.Editor

@inject IHttpClientFactory HttpClientFactory
@inject ILogger<Home> Logger

<MudFileUpload T="IBrowserFile" OnFilesChanged="args => UploadFilesAsync(args.File)" Accept=".pdf" AppendMultipleFiles="false">
    <ActivatorContent>
        <MudButton Variant="Variant.Filled"
                   Color="Color.Primary"
                   StartIcon="@Icons.Material.Filled.CloudUpload">
            Upload PDF file
        </MudButton>
    </ActivatorContent>
</MudFileUpload>

@if (_fileContent != null && _ocrResponse != null)
{
    <MudTabs>
        <MudTabPanel Text="PDF" Icon="@Icons.Material.Filled.PictureAsPdf">
            <MudStack Row="true" AlignItems="AlignItems.Start">
                <MudPaper Width="45%" Height="70%">
                    <MudTabs>
                        <MudTabPanel Text="PDF.js" Icon="@Icons.Material.Filled.PictureAsPdf">
                            <MudPdfJsViewer FileContent="@_fileContent" AltoData="OcrResponsesToAltoDocumentHelper.GetAltoDocument(_ocrResponse)"/>
                        </MudTabPanel>
                        <MudTabPanel Text="Gotho BlazorPdf" Icon="@Icons.Material.Filled.PictureAsPdf" Disabled="true">
                            <MudAltoPdfViewer FileContent="@_fileContent" AltoData="OcrResponsesToAltoDocumentHelper.GetAltoDocument(_ocrResponse)" />
                        </MudTabPanel>
                        <MudTabPanel Text="Just open PDF in an IFrame" Icon="@Icons.Material.Filled.PictureAsPdf">
                            <MudSimplePdfViewer FileContent="@_fileContent" />
                        </MudTabPanel>
                    </MudTabs>
                </MudPaper>
                <MudPaper Width="45%" Height="70%">
                    <MudOcrDetailsViewer OcrResponse="_ocrResponse"/>
                </MudPaper>
            </MudStack>
        </MudTabPanel>

        <MudTabPanel Text="Alto" Icon="@Icons.Material.Filled.Code">
            <StandaloneCodeEditor Id="my-code-editor" ConstructionOptions="ConstructionOptions" CssClass="MudCodeEditor" />
        </MudTabPanel>
    </MudTabs>
}

@code {
    private OcrResponses? _ocrResponse;
    private byte[]? _fileContent;

    private async Task UploadFilesAsync(IBrowserFile? browserFile)
    {
        Logger.LogInformation("Uploading file...");
        Console.WriteLine("Uploading file...");
        if (browserFile != null)
        {
            var client = HttpClientFactory.CreateClient("OcrApi");
            var resourceUri = new Uri(client.BaseAddress!.OriginalString + "Ocr/pdf");
            Logger.LogInformation("Sending request to OCR API: {RequestUri}", resourceUri);

            using var memoryStream = new MemoryStream();
            await browserFile.OpenReadStream().CopyToAsync(memoryStream);
            memoryStream.Position = 0;
            var fileName = browserFile.Name;
            var fileBytes = memoryStream.ToArray();
            _fileContent = fileBytes;

            client.Timeout = TimeSpan.FromMinutes(10);

            var jsonContentRequest = new StringContent(JsonSerializer.Serialize(new FileUploadRequest
            {
                Base64String = Convert.ToBase64String(fileBytes),
                FileName = fileName
            }, new JsonSerializerOptions(JsonSerializerDefaults.Web)), Encoding.UTF8, "application/json");

            var request = new HttpRequestMessage(HttpMethod.Post, resourceUri)
            {
                Content = jsonContentRequest
            };

            using var response = await client.SendAsync(request, HttpCompletionOption.ResponseContentRead);
            response.EnsureSuccessStatusCode();
            var body = await response.Content.ReadFromJsonAsync<OcrResponses?>(new JsonSerializerOptions(JsonSerializerDefaults.Web));

            _ocrResponse = body;
        }

        StateHasChanged();
    }

    private StandaloneEditorConstructionOptions ConstructionOptions(StandaloneCodeEditor arg) =>
        new()
        {
            AutomaticLayout = true,
            Language = "xml",
            Value = OcrResponsesToAltoDocumentHelper.GetRawAltoDocument(_ocrResponse ?? new OcrResponses()),
            Dimension = new Dimension() 
            {
                Width = 800,
                Height = 1000
            }
        };

}
